apple_quality <- read.csv("A:/learning/sem 2/data mining/project/apple/apple_quality.csv")
# Finding the shape of the data using dim()
shape <- dim(apple_quality)
print(shape)
# head() gives us the first few rows of the dataset
head(apple_quality)
# For basic statistics, we use summary()
summary(apple_quality)
# Checking the total number of values in each column
col_values <- sapply(apple_quality, function(x) length(x))
print(col_values)
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Printing the tail of the data set
tail(apple_quality)
# na.omit() removes the rows with missing values
apple_quality <- na.omit(apple_quality)
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Removing the column named "A_id" as it is duplicated
apple_quality <- apple_quality[, !(names(apple_quality) == "A_id")]
head(apple_quality)
# converting type of Acidity to double
apple_quality$Acidity <- as.numeric(apple_quality$Acidity)
print(typeof(apple_quality$Acidity))
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Converting Quality to binary (`GOOD = 1` and `BAD = 0`)
apple_quality$Quality <- ifelse(apple_quality$Quality == "good", 1, 0)
# Checking the distribution of Quality
quality_counts <- table(apple_quality$Quality)
print(quality_counts)
quality_counts_df <- as.data.frame(quality_counts)
names(quality_counts_df) <- c("Quality", "Count")
ggplot(quality_counts_df, aes(x = factor(Quality), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Frequency of 1s and 0s in Quality",
x = "Quality",
y = "Count")
# plot_distribution is used to plot the distribution of values in each column
plot_distribution <- function(data, col_name) {
if(is.numeric(data[[col_name]])) {
ggplot(data, aes(x = !!sym(col_name))) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
} else {
ggplot(data, aes(x = factor(!!sym(col_name)))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
}
}
for (col_name in names(apple_quality)) {
plots_list[[col_name]] <- plot_distribution(apple_quality, col_name)
}
grid.arrange(grobs = plots_list, ncol = 3)
# Plotting correlation matrix for all numeric columns
correlation_matrix <- cor(apple_quality)
corrplot(correlation_matrix, method = 'square', order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
# Pair wise plotting between all features.
pairs(apple_quality, col = "blue", pch = 16, labels = colnames(apple_quality))
par(mfrow=c(1, ncol(apple_quality)))
for(i in 1:ncol(apple_quality)) {
if(is.numeric(apple_quality[, i])) {
boxplot(apple_quality[, i], main=names(apple_quality)[i])
}
}
apple_quality <- as.data.frame(apple_quality)
outlier_indices <- list()
for (col_name in names(apple_quality)) {
z_scores <- scale(apple_quality[[col_name]])
threshold <- 3
outliers <- which(abs(z_scores) > threshold)
outlier_indices[[col_name]] <- outliers
}
all_outliers <- unique(unlist(outlier_indices))
apple_quality <- apple_quality[-all_outliers, ]
shape <- dim(apple_quality)
print(shape)
target_variable <- apple_quality[, ncol(apple_quality)]
cat("Shape of target_variable: ", length(target_variable), "\n")
feature_variables <- apple_quality[, -ncol(apple_quality)]
print("Shape of feature_variables: ")
shape_feature_variables <- dim(feature_variables)
print(shape_feature_variables)
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
apple_quality <- read.csv("A:/learning/sem 2/data mining/project/apple/apple_quality.csv")
# Finding the shape of the data using dim()
shape <- dim(apple_quality)
print(shape)
# head() gives us the first few rows of the dataset
head(apple_quality)
# For basic statistics, we use summary()
summary(apple_quality)
# Checking the total number of values in each column
col_values <- sapply(apple_quality, function(x) length(x))
print(col_values)
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Printing the tail of the data set
tail(apple_quality)
# na.omit() removes the rows with missing values
apple_quality <- na.omit(apple_quality)
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Removing the column named "A_id" as it is duplicated
apple_quality <- apple_quality[, !(names(apple_quality) == "A_id")]
head(apple_quality)
# converting type of Acidity to double
apple_quality$Acidity <- as.numeric(apple_quality$Acidity)
print(typeof(apple_quality$Acidity))
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Converting Quality to binary (`GOOD = 1` and `BAD = 0`)
apple_quality$Quality <- ifelse(apple_quality$Quality == "good", 1, 0)
# Checking the distribution of Quality
quality_counts <- table(apple_quality$Quality)
print(quality_counts)
quality_counts_df <- as.data.frame(quality_counts)
names(quality_counts_df) <- c("Quality", "Count")
ggplot(quality_counts_df, aes(x = factor(Quality), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Frequency of 1s and 0s in Quality",
x = "Quality",
y = "Count")
# plot_distribution is used to plot the distribution of values in each column
plot_distribution <- function(data, col_name) {
if(is.numeric(data[[col_name]])) {
ggplot(data, aes(x = !!sym(col_name))) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
} else {
ggplot(data, aes(x = factor(!!sym(col_name)))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
}
}
for (col_name in names(apple_quality)) {
plots_list[[col_name]] <- plot_distribution(apple_quality, col_name)
}
grid.arrange(grobs = plots_list, ncol = 3)
# Plotting correlation matrix for all numeric columns
correlation_matrix <- cor(apple_quality)
corrplot(correlation_matrix, method = 'square', order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
# Pair wise plotting between all features.
pairs(apple_quality, col = "blue", pch = 16, labels = colnames(apple_quality))
par(mfrow=c(1, ncol(apple_quality)))
for(i in 1:ncol(apple_quality)) {
if(is.numeric(apple_quality[, i])) {
boxplot(apple_quality[, i], main=names(apple_quality)[i])
}
}
apple_quality <- as.data.frame(apple_quality)
outlier_indices <- list()
for (col_name in names(apple_quality)) {
z_scores <- scale(apple_quality[[col_name]])
threshold <- 3
outliers <- which(abs(z_scores) > threshold)
outlier_indices[[col_name]] <- outliers
}
all_outliers <- unique(unlist(outlier_indices))
apple_quality <- apple_quality[-all_outliers, ]
shape <- dim(apple_quality)
print(shape)
target_variable <- apple_quality[, ncol(apple_quality)]
cat("Shape of target_variable: ", length(target_variable), "\n")
feature_variables <- apple_quality[, -ncol(apple_quality)]
shape_feature_variables <- dim(feature_variables)
cat("Shape of feature_variables:", shape_feature_variables, "\n")
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
# Splitting the dataset into train-test
train_index <- createDataPartition(apple_quality$target_variable, p = 0.8, list = FALSE)
# Splitting the dataset into train-test
train_index <- createDataPartition(target_variable, p = 0.8, list = FALSE)
train_data <- df[train_index, ]
# Splitting the dataset into train-test
train_index <- createDataPartition(target_variable, p = 0.8, list = FALSE)
train_data <- apple_quality[train_index, ]
test_data <- apple_quality[-train_index, ]
# Splitting the dataset into train-test
train_index <- createDataPartition(target_variable, p = 0.8, list = FALSE)
train_data <- apple_quality[train_index, ]
test_data <- apple_quality[-train_index, ]
cat("Shape of train_data: ", dim(train_data), "\n","Shape of test_data: ", dim(test_data))
# Splitting the dataset into train-test
train_index <- createDataPartition(target_variable, p = 0.8, list = FALSE)
train_data <- apple_quality[train_index, ]
test_data <- apple_quality[-train_index, ]
cat(" Shape of train_data: ", dim(train_data), "\n","Shape of test_data: ", dim(test_data))
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
apple_quality <- read.csv("A:/learning/sem 2/data mining/project/apple/apple_quality.csv")
# Finding the shape of the data using dim()
shape <- dim(apple_quality)
print(shape)
# head() gives us the first few rows of the dataset
head(apple_quality)
# For basic statistics, we use summary()
summary(apple_quality)
# Checking the total number of values in each column
col_values <- sapply(apple_quality, function(x) length(x))
print(col_values)
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Printing the tail of the data set
tail(apple_quality)
# na.omit() removes the rows with missing values
apple_quality <- na.omit(apple_quality)
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Removing the column named "A_id" as it is duplicated
apple_quality <- apple_quality[, !(names(apple_quality) == "A_id")]
head(apple_quality)
# converting type of Acidity to double
apple_quality$Acidity <- as.numeric(apple_quality$Acidity)
print(typeof(apple_quality$Acidity))
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Converting Quality to binary (`GOOD = 1` and `BAD = 0`)
apple_quality$Quality <- ifelse(apple_quality$Quality == "good", 1, 0)
# Checking the distribution of Quality
quality_counts <- table(apple_quality$Quality)
print(quality_counts)
quality_counts_df <- as.data.frame(quality_counts)
names(quality_counts_df) <- c("Quality", "Count")
ggplot(quality_counts_df, aes(x = factor(Quality), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Frequency of 1s and 0s in Quality",
x = "Quality",
y = "Count")
# plot_distribution is used to plot the distribution of values in each column
plot_distribution <- function(data, col_name) {
if(is.numeric(data[[col_name]])) {
ggplot(data, aes(x = !!sym(col_name))) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
} else {
ggplot(data, aes(x = factor(!!sym(col_name)))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
}
}
for (col_name in names(apple_quality)) {
plots_list[[col_name]] <- plot_distribution(apple_quality, col_name)
}
grid.arrange(grobs = plots_list, ncol = 3)
# Plotting correlation matrix for all numeric columns
correlation_matrix <- cor(apple_quality)
corrplot(correlation_matrix, method = 'square', order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
# Pair wise plotting between all features.
pairs(apple_quality, col = "blue", pch = 16, labels = colnames(apple_quality))
# plotting boxplot to find outliers
par(mfrow=c(1, ncol(apple_quality)))
for(i in 1:ncol(apple_quality)) {
if(is.numeric(apple_quality[, i])) {
boxplot(apple_quality[, i], main=names(apple_quality)[i])
}
}
# Removing outliers using Z_Scores
apple_quality <- as.data.frame(apple_quality)
outlier_indices <- list()
for (col_name in names(apple_quality)) {
z_scores <- scale(apple_quality[[col_name]])
threshold <- 3
outliers <- which(abs(z_scores) > threshold)
outlier_indices[[col_name]] <- outliers
}
all_outliers <- unique(unlist(outlier_indices))
apple_quality <- apple_quality[-all_outliers, ]
shape <- dim(apple_quality)
print(shape)
# Separating target and feature variables
target_variable <- apple_quality[, ncol(apple_quality)]
cat("Shape of target_variable: ", length(target_variable), "\n")
feature_variables <- apple_quality[, -ncol(apple_quality)]
shape_feature_variables <- dim(feature_variables)
cat("Shape of feature_variables:", shape_feature_variables, "\n")
# Splitting the dataset into train-test
train_index <- createDataPartition(target_variable, p = 0.8, list = FALSE)
train_data <- apple_quality[train_index, ]
test_data <- apple_quality[-train_index, ]
cat(" Shape of train_data: ", dim(train_data), "\n","Shape of test_data: ", dim(test_data))
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
apple_quality <- read.csv("A:/learning/sem 2/data mining/project/apple/apple_quality.csv")
# Finding the shape of the data using dim()
shape <- dim(apple_quality)
print(shape)
# head() gives us the first few rows of the dataset
head(apple_quality)
# For basic statistics, we use summary()
summary(apple_quality)
# Checking the total number of values in each column
col_values <- sapply(apple_quality, function(x) length(x))
print(col_values)
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Printing the tail of the data set
tail(apple_quality)
# na.omit() removes the rows with missing values
apple_quality <- na.omit(apple_quality)
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Removing the column named "A_id" as it is duplicated
apple_quality <- apple_quality[, !(names(apple_quality) == "A_id")]
head(apple_quality)
# converting type of Acidity to double
apple_quality$Acidity <- as.numeric(apple_quality$Acidity)
print(typeof(apple_quality$Acidity))
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Converting Quality to binary (`GOOD = 1` and `BAD = 0`)
apple_quality$Quality <- ifelse(apple_quality$Quality == "good", 1, 0)
# Checking the distribution of Quality
quality_counts <- table(apple_quality$Quality)
print(quality_counts)
quality_counts_df <- as.data.frame(quality_counts)
names(quality_counts_df) <- c("Quality", "Count")
ggplot(quality_counts_df, aes(x = factor(Quality), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Frequency of 1s and 0s in Quality",
x = "Quality",
y = "Count")
# plot_distribution is used to plot the distribution of values in each column
plot_distribution <- function(data, col_name) {
if(is.numeric(data[[col_name]])) {
ggplot(data, aes(x = !!sym(col_name))) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
} else {
ggplot(data, aes(x = factor(!!sym(col_name)))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
}
}
for (col_name in names(apple_quality)) {
plots_list[[col_name]] <- plot_distribution(apple_quality, col_name)
}
grid.arrange(grobs = plots_list, ncol = 3)
# Plotting correlation matrix for all numeric columns
correlation_matrix <- cor(apple_quality)
corrplot(correlation_matrix, method = 'square', order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
# Pair wise plotting between all features.
pairs(apple_quality, col = "blue", pch = 16, labels = colnames(apple_quality))
# plotting boxplot to find outliers
par(mfrow=c(1, ncol(apple_quality)))
for(i in 1:ncol(apple_quality)) {
if(is.numeric(apple_quality[, i])) {
boxplot(apple_quality[, i], main=names(apple_quality)[i])
}
}
# Removing outliers using Z_Scores
apple_quality <- as.data.frame(apple_quality)
outlier_indices <- list()
for (col_name in names(apple_quality)) {
z_scores <- scale(apple_quality[[col_name]])
threshold <- 3
outliers <- which(abs(z_scores) > threshold)
outlier_indices[[col_name]] <- outliers
}
all_outliers <- unique(unlist(outlier_indices))
apple_quality <- apple_quality[-all_outliers, ]
shape <- dim(apple_quality)
print(shape)
# Separating target and feature variables
target_variable <- apple_quality[, ncol(apple_quality)]
cat("Shape of target_variable: ", length(target_variable), "\n")
feature_variables <- apple_quality[, -ncol(apple_quality)]
shape_feature_variables <- dim(feature_variables)
cat("Shape of feature_variables:", shape_feature_variables, "\n")
# Splitting the dataset into train-test
train_index <- createDataPartition(target_variable, p = 0.8, list = FALSE)
train_data <- apple_quality[train_index, ]
test_data <- apple_quality[-train_index, ]
cat(" Shape of train_data: ", dim(train_data), "\n","Shape of test_data: ", dim(test_data))
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
knitr::opts_chunk$set(echo = TRUE)
install.packages(&quot;ClusterR&quot;)
install.packages("ClusterR")
install.packages("cluster")
library(caret)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(ClusterR)
library(cluster)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ClusterR")
install.packages("cluster")
library(caret)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(ClusterR)
library(cluster)
apple_quality <- read.csv("A:/learning/sem 2/data mining/project/apple/apple_quality.csv")
# Finding the shape of the data using dim()
shape <- dim(apple_quality)
print(shape)
# head() gives us the first few rows of the dataset
head(apple_quality)
# For basic statistics, we use summary()
summary(apple_quality)
install.packages("cluster")
# Checking the total number of values in each column
col_values <- sapply(apple_quality, function(x) length(x))
print(col_values)
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Printing the tail of the data set
tail(apple_quality)
# na.omit() removes the rows with missing values
apple_quality <- na.omit(apple_quality)
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Removing the column named "A_id" as it is duplicated
apple_quality <- apple_quality[, !(names(apple_quality) == "A_id")]
head(apple_quality)
# converting type of Acidity to double
apple_quality$Acidity <- as.numeric(apple_quality$Acidity)
print(typeof(apple_quality$Acidity))
# Checking if there are any missing values in each columns
missing_values <- colSums(is.na(apple_quality))
print(missing_values)
# Converting Quality to binary (`GOOD = 1` and `BAD = 0`)
apple_quality$Quality <- ifelse(apple_quality$Quality == "good", 1, 0)
# Checking the distribution of Quality
quality_counts <- table(apple_quality$Quality)
print(quality_counts)
quality_counts_df <- as.data.frame(quality_counts)
names(quality_counts_df) <- c("Quality", "Count")
ggplot(quality_counts_df, aes(x = factor(Quality), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Frequency of 1s and 0s in Quality",
x = "Quality",
y = "Count")
# plot_distribution is used to plot the distribution of values in each column
plot_distribution <- function(data, col_name) {
if(is.numeric(data[[col_name]])) {
ggplot(data, aes(x = !!sym(col_name))) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
} else {
ggplot(data, aes(x = factor(!!sym(col_name)))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = paste("Distribution of", col_name),
x = col_name,
y = "Frequency")
}
}
for (col_name in names(apple_quality)) {
plots_list[[col_name]] <- plot_distribution(apple_quality, col_name)
}
grid.arrange(grobs = plots_list, ncol = 3)
# Plotting correlation matrix for all numeric columns
correlation_matrix <- cor(apple_quality)
corrplot(correlation_matrix, method = 'square', order = 'AOE', addCoef.col = 'black', tl.pos = 'd',
cl.pos = 'n', col = COL2('BrBG'))
# Pair wise plotting between all features.
pairs(apple_quality, col = "blue", pch = 16, labels = colnames(apple_quality))
source("A:/learning/sem 2/data mining/project/Apple-Quality-using-R/Amrithya_Balaji_data_mining.Rmd")
